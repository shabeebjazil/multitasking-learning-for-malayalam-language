# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GIu3tqdmqVwQ11Avve_LU4suJ94cayr2
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import re
import string
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Use pd.read_excel to read xlsx files
data = pd.read_excel('/content/drive/MyDrive/Malayalam.xlsx')

data.head()

"""preprocessing"""

def clean_text(text):
    stop_words=open(r'/content/drive/MyDrive/malayalam_stopwords.txt', encoding='utf=8').read().split('\n')
    text = re.sub('@[a-zA-Z0-9]*', '', str(text))
    text = "".join([word for word in text if word not in string.punctuation])
    text = "".join([word for word in text if not word.isdigit()])
    tokens = re.split('\s+',text)
    text = " ".join(word for word in tokens if word not in stop_words)          # here english words may lemmatize so kept lematization
    return text

data['text']=data['comment'].apply(clean_text)

"""feuture extraction"""

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()euture extraction


[ ]
from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data['text'])

[ ]
X = vectorizer.fit_transform(data['text'])

from sklearn.feature_extraction.text import TfidfTransformer

transformer = TfidfTransformer()
X = transformer.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, data['sent'], test_size=0.2, random_state=42) # Assuming 'label' is your target variable column

"""model building"""

from sklearn.ensemble import RandomForestClassifier

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42) # You can adjust hyperparameters like n_estimators
rf_classifier.fit(X_train, y_train)
rf_predictions = rf_classifier.predict(X_test)

from sklearn.metrics import classification_report

report = classification_report(y_test, rf_predictions)

from sklearn.tree import DecisionTreeClassifier

# Replace this line:
# rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# With this line:
dt_classifier = DecisionTreeClassifier(random_state=42) # You can adjust hyperparameters like max_depth, min_samples_split, etc.

dt_classifier.fit(X_train, y_train)
dt_predictions = dt_classifier.predict(X_test)

from sklearn.metrics import classification_report
report = classification_report(y_test, dt_predictions)  # Use dt_predictions here
print(report)



"""Offensive Language detection"""

from sklearn.model_selection import train_test_split
X_train, X_teast, y_train1, y_test1 = train_test_split(X, data['off'], test_size=0.2, random_state=42) # Assuming 'label' is your target variable column

from sklearn.ensemble import RandomForestClassifier

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42) # You can adjust hyperparameters like n_estimators
rf_classifier.fit(X_train, y_train1)
rf_predictions = rf_classifier.predict(X_test)

report = classification_report(y_test, rf_predictions)
print(report)







dt_classiafier.fit(X_train, y_train1)
dt_predictions = dt_classifier.predict(X_test)

from sklearn.metrics import classification_report
report = classification_report(y_test, dt_predictions)  # Use dt_predictions here
print(report)